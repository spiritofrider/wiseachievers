{"ast":null,"code":"import { environment } from \"src/environments/environment\";\nimport { CONSTOBJ } from \"../shared/shared-constant\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { JwtHelperService } from \"@auth0/angular-jwt\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/material/snack-bar\";\nexport let CommonService = /*#__PURE__*/(() => {\n  class CommonService {\n    constructor(httpClient, _snackBar) {\n      this.httpClient = httpClient;\n      this._snackBar = _snackBar;\n      this.isTestStatus = new BehaviorSubject([]);\n      this.updatedTestStatus = this.isTestStatus.asObservable();\n    }\n\n    getAllUsers() {\n      return this.httpClient.get(environment.baseUrlNode + CONSTOBJ[\"admin\"][\"getAllUsers\"]);\n    }\n\n    editUsers(id, body) {\n      return this.httpClient.put(environment.baseUrlNode + CONSTOBJ[\"admin\"][\"editUser\"] + id, body);\n    }\n\n    loginUser(formbody) {\n      return this.httpClient.post(environment.baseUrlNode + CONSTOBJ[\"login\"], formbody);\n    }\n\n    registerUser(formbody) {\n      return this.httpClient.post(environment.baseUrlNode + CONSTOBJ[\"register\"], formbody);\n    }\n\n    testUserStatus(userId) {\n      return this.httpClient.get(environment.baseUrlNode + CONSTOBJ[\"testStatus\"] + userId);\n    }\n\n    viewReport(userId) {\n      return this.httpClient.get(environment.baseCalculationUrl + CONSTOBJ[\"admin\"][\"viewReports\"] + userId);\n    }\n\n    snackBar(message, snackStyle) {\n      this._snackBar.open(message, \"\", {\n        duration: 3000,\n        panelClass: [snackStyle]\n      });\n    }\n\n    updateData(data, keyToShare) {\n      switch (keyToShare) {\n        case \"testStatus\":\n          console.log(this.isTestStatus.observers);\n          this.isTestStatus.next(data);\n          break;\n      }\n    }\n\n    tokenDecryption(token) {\n      const helper = new JwtHelperService();\n      let decodedToken;\n\n      if (token) {\n        decodedToken = helper.decodeToken(token);\n      } else {\n        decodedToken = {};\n      }\n\n      return decodedToken;\n    }\n\n  }\n\n  CommonService.ɵfac = function CommonService_Factory(t) {\n    return new (t || CommonService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MatSnackBar));\n  };\n\n  CommonService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CommonService,\n    factory: CommonService.ɵfac,\n    providedIn: \"root\"\n  });\n  return CommonService;\n})();","map":null,"metadata":{},"sourceType":"module"}