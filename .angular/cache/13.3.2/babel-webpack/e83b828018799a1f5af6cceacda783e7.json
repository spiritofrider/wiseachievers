{"ast":null,"code":"import html2canvas from \"html2canvas\";\nimport * as Highcharts from \"highcharts\";\nimport HC_exporting from \"highcharts/modules/exporting\";\nimport HC_exportData from \"highcharts/modules/export-data\";\nimport highcharts3d from \"highcharts/highcharts-3d\";\nimport { saveAs } from \"file-saver\";\nimport { Document, ImageRun, Packer, Paragraph, TextRun } from \"docx\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\n\nfunction GraphsComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"h2\");\n    i0.ɵɵtext(2, \"Career Interest\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 3);\n    i0.ɵɵelement(4, \"div\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 3);\n    i0.ɵɵelement(6, \"div\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GraphsComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"h2\");\n    i0.ɵɵtext(2, \"Personality\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 3);\n    i0.ɵɵelement(4, \"div\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 3);\n    i0.ɵɵelement(6, \"div\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let GraphsComponent = /*#__PURE__*/(() => {\n  class GraphsComponent {\n    constructor() {\n      this.barGraphColors = [\"#f4c2c2\", \"#b000b5\", \"#c0ffee\", \"#ffbf00\", \"#f2f3f4\", \"#8db600\", \"#b2beb5\", \"#6e7f80\", \"#ff2052\", \"#848482\", \"#ffebcd\", \"#a2a2d0\", \"#0095b6\", \"#e3dac9\", \"#f0dc82\", \"#ffbcd9\", \"#a9a9a9\", \"#734f96\", \"#779ecb\", \"#8fbc8f\", \"#918151\", \"#fad6a5\", \"#f0ead6\", \"#e1a95f\", \"#85bb65\", \"#edc9af\", \"#50c878\", \"#e5aa70\", \"#eedc82\", \"#a67b5b\", \"#ff00ff\", \"#6082b6\", \"#808000\", \"#446ccf\", \"#b2ec5d\", \"#bdda57\", \"#a9ba9d\", \"#ccccff\"];\n      this.chartType = \"bar\";\n      this.pieChartType = \"pie\";\n      this.chartLegend = false;\n      this.pieChartLegend = true;\n      this.career2Data = [];\n      this.career3Data = [];\n      this.personality1Data = [];\n      this.personality2Data = [];\n      this.aptitudeLabels = [\"English Ability\", \"Numerical Ability\", \"Mechanical Ability\", \"Visual Spatial Ability\"];\n      this.aptitudeData = [];\n    }\n\n    ngOnInit() {\n      console.log(this.graphInfo);\n      this.career2Labels = Object.keys(this.graphInfo.test_2.info);\n      this.career2Data = this.chartObject(\"test_2\", \"Career interest chart\");\n      this.career3Labels = Object.keys(this.graphInfo.test_3.info);\n      this.career3Data = this.chartObject(\"test_3\", \"Career interest chart\");\n      this.personality1Labels = Object.keys(this.graphInfo.test_4.info);\n      this.personality1Data = this.chartObject(\"test_4\", \"Personality chart\");\n      this.personality2Labels = Object.keys(this.graphInfo.test_5.info);\n      this.personality2Data = this.chartObject(\"test_5\", \"Personality chart\");\n      this.aptitudeData = this.aptitudeObject(\"Aptitude results\");\n    }\n\n    ngAfterViewInit() {\n      this.generating3DPieChart(this.graphInfo.test_3.info);\n      this.generating3DBarChart(this.career2Data, this.career2Labels, \"Career interest chart\", \"barContainerCareer2\"); //this.generating3DBarChart(this.career3Data, this.career3Labels,'Career interest chart', 'barContainerCareer3');\n\n      this.generating3DBarChart(this.personality1Data, this.personality1Labels, \"Personality chart\", \"barContainerPersonality1\");\n      this.generating3DBarChart(this.personality2Data, this.personality2Labels, \"Personality chart\", \"barContainerPersonality2\");\n      console.log(this.aptitudeData);\n      this.generating3DBarChart(this.aptitudeData, this.aptitudeData[0].label, \"Aptitude results\", \"barContainerAptitude\");\n    }\n\n    chartObject(testNumber, header) {\n      return [{\n        data: this.chartData(testNumber),\n        backgroundColor: this.barGraphColors\n      }];\n    }\n\n    chartData(testNumber) {\n      const data = this.graphInfo[testNumber].info;\n      return Object.keys(data).map(k => data[k]);\n    }\n\n    aptitudeObject(header) {\n      return [{\n        data: [this.graphInfo.test_6.info, this.graphInfo.test_7.info, this.graphInfo.test_8.info, this.graphInfo.test_9.info],\n        label: header,\n        backgroundColor: this.barGraphColors\n      }];\n    }\n\n    generating3DPieChart(chartData) {\n      HC_exporting(Highcharts);\n      HC_exportData(Highcharts);\n      let pieChartData = [];\n      Object.keys(chartData).forEach(element => {\n        pieChartData.push([element, chartData[element]]);\n      });\n      highcharts3d(Highcharts);\n      Highcharts.chart(\"container\", {\n        chart: {\n          type: \"pie\",\n          options3d: {\n            enabled: true,\n            alpha: 45,\n            beta: 0\n          }\n        },\n        title: {\n          text: \"Career interest chart\"\n        },\n        accessibility: {\n          point: {\n            valueSuffix: \"%\"\n          }\n        },\n        tooltip: {\n          pointFormat: \"{series.name}: <b>{point.percentage:.1f}%</b>\"\n        },\n        plotOptions: {\n          pie: {\n            allowPointSelect: true,\n            cursor: \"pointer\",\n            depth: 35,\n            dataLabels: {\n              enabled: true,\n              format: \"{point.name}\"\n            }\n          }\n        },\n        series: [{\n          type: \"pie\",\n          name: \"Career interest chart\",\n          data:\n          /*  [\"Firefox\", 45.0],\n          [\"IE\", 26.8],\n          {\n            name: \"Chrome\",\n            y: 12.8,\n            sliced: true,\n            selected: true,\n          },\n          [\"Safari\", 8.5],\n          [\"Opera\", 6.2],\n          [\"Others\", 0.7], */\n          pieChartData\n        }]\n      });\n    }\n\n    generating3DBarChart(chartData, chartLables, title, id) {\n      let barChartData = chartData[0].data;\n      console.log(barChartData);\n      highcharts3d(Highcharts);\n      const chart = new Highcharts.Chart({\n        chart: {\n          renderTo: id,\n          type: \"column\",\n          options3d: {\n            enabled: true,\n            alpha: 15,\n            beta: 15,\n            depth: 50,\n            viewDistance: 25\n          }\n        },\n        title: {\n          text: title\n        },\n        plotOptions: {\n          column: {\n            depth: 25\n          }\n        },\n        xAxis: {\n          categories: chartLables,\n          labels: {\n            skew3d: true,\n            style: {\n              fontSize: \"16px\"\n            }\n          }\n        },\n        yAxis: {\n          title: {\n            text: null\n          }\n        },\n        series: [{\n          type: \"column\",\n          name: title,\n          data: barChartData\n        }]\n      });\n    }\n\n    downloadCanvas(event) {\n      // get the `<a>` element from click event\n      var anchor = event.target; // get the canvas, I'm getting it by tag name, you can do by id\n      // and set the href of the anchor to the canvas dataUrl\n\n      console.log(document.getElementById(\"container\"), document.getElementsByClassName(\"highcharts-container\"));\n      anchor.href = document.getElementById(\"canvas1\").toDataURL(); //anchor.href = imgWrap.toDataURL();\n      // set the anchors 'download' attibute (name of the file to be downloaded)\n      //console.log(imgWrap, anchor.href.toString());\n      //anchor.download = \"test.png\";\n\n      var svg = document.getElementById(\"container\").children[0].innerHTML;\n      var base_image = new Image();\n      svg = \"data:image/svg+xml,\" + svg;\n      base_image.src = svg;\n      console.log(base_image.src.toString());\n      let link = document.createElement(\"a\");\n      html2canvas(document.getElementById(\"container\")).then(function (canvas) {\n        // Convert the canvas to blob\n        canvas.toBlob(function (blob) {\n          // To download directly on browser default 'downloads' location\n          //link.download = \"image.png\";\n          link.href = URL.createObjectURL(blob);\n          console.log(link.href); // To save manually somewhere in file explorer\n          // saveAs(blob, \"image.png\");\n        }, \"image/png\");\n      });\n      const doc = new Document({\n        sections: [{\n          properties: {},\n          children: [new Paragraph({\n            children: [new TextRun(\"Hello World\"), new TextRun({\n              text: \"Foo Bar\",\n              bold: true\n            }), new TextRun({\n              text: \"\\tGithub is the best\",\n              bold: true\n            })]\n          }), new Paragraph({\n            children: [new ImageRun({\n              data: link.href,\n              transformation: {\n                width: 100,\n                height: 100\n              }\n            })]\n          })]\n        }]\n      });\n      Packer.toBlob(doc).then(blob => {\n        console.log(blob);\n        saveAs(blob, \"example.docx\");\n        console.log(\"Document created successfully\");\n      });\n    }\n\n  }\n\n  GraphsComponent.ɵfac = function GraphsComponent_Factory(t) {\n    return new (t || GraphsComponent)();\n  };\n\n  GraphsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: GraphsComponent,\n    selectors: [[\"app-graphs\"]],\n    inputs: {\n      graphInfo: \"graphInfo\"\n    },\n    decls: 11,\n    vars: 3,\n    consts: [[\"type\", \"button\", 1, \"ml-auto\", \"btn\", \"btn-primary\", \"squareButtons\", 3, \"click\"], [\"id\", \"source-html\", 1, \"data-card\", \"graphContainer\"], [4, \"ngIf\"], [1, \"data-card\", 2, \"background-color\", \"white\"], [\"id\", \"barContainerAptitude\"], [\"id\", \"barContainerCareer2\"], [\"id\", \"container\"], [\"id\", \"barContainerPersonality1\"], [\"id\", \"barContainerPersonality2\"]],\n    template: function GraphsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"a\", 0);\n        i0.ɵɵlistener(\"click\", function GraphsComponent_Template_a_click_0_listener($event) {\n          return ctx.downloadCanvas($event);\n        });\n        i0.ɵɵtext(1, \" download\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 1);\n        i0.ɵɵelementStart(3, \"h5\");\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(5, GraphsComponent_div_5_Template, 7, 0, \"div\", 2);\n        i0.ɵɵtemplate(6, GraphsComponent_div_6_Template, 7, 0, \"div\", 2);\n        i0.ɵɵelementStart(7, \"h2\");\n        i0.ɵɵtext(8, \"Aptitudes and Abilities\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 3);\n        i0.ɵɵelement(10, \"div\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\"Name : \", ctx.graphInfo.fullName, \"\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.graphInfo.test_2.completed && ctx.graphInfo.test_3.completed);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.graphInfo.test_4.completed && ctx.graphInfo.test_5.completed);\n      }\n    },\n    directives: [i1.NgIf],\n    styles: [\".data-card[_ngcontent-%COMP%]{display:flex;flex-direction:column;min-height:20px;border-radius:.5em;text-decoration:none;margin:1em;box-shadow:1em 1em 1.5em -.5em #0000001a;transition:transform .45s ease,background .45s ease;background-color:#ecf3f4;justify-content:center}.graphContainer[_ngcontent-%COMP%]{padding:10px}\"]\n  });\n  return GraphsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}