{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet TestScreenComponent = class TestScreenComponent {\n  constructor(testExample, sharedService, testService, router) {\n    this.testExample = testExample;\n    this.sharedService = sharedService;\n    this.testService = testService;\n    this.router = router;\n    this.preferenceObject = {\n      'question': '',\n      'FirstPreferance': '',\n      'SecondPreferance': '',\n      'ThirdPreferance': '',\n      'FirstPreferanceIndex': null,\n      'SecondPreferanceIndex': null,\n      'ThirdPreferanceIndex': null\n    };\n    this.submissionPart = true;\n    this.mainTestObject = [];\n    this.answerSheet = [];\n    this.PaginationControl = {\n      ques: 0,\n      boolVal: false\n    };\n    this.currentQuestion = 0;\n  }\n\n  ngOnInit() {\n    this.getTest1list(); //this.TestQuiz = this.testExample.getExampleTest();\n  }\n\n  questionIncremented(qno) {\n    console.log(\"emit freq\", qno);\n    this.currentQuestion = qno;\n    this.PaginationControl.ques = qno;\n\n    if (this.currentQuestion % 4 == 0 && this.currentQuestion != 0) {\n      /*  let boxAr = [];\n       boxAr= [...this.TestQuiz]\n       let endIndex = this.currentQuestion == boxAr.length ? boxAr.length : this.currentQuestion+4\n       console.log(endIndex)\n       this.incrementBoxes = boxAr.slice(this.currentQuestion,endIndex)\n       console.log(this.incrementBoxes) */\n      this.boxPaginationLogic();\n    }\n  }\n\n  finalObjReturned(obj) {\n    console.log(\"emitting result\", obj);\n    const avail = obj.find(e => e['id'] == this.TestQuiz[this.currentQuestion].qno);\n    /*  if(avail && Object.values(avail).every(v => v) ){  document.getElementById(`b${this.currentQuestion}`).style.backgroundColor = '#0081d6'\n     document.getElementById(`b${this.currentQuestion}`).style.color = 'white'}\n     else{\n       document.getElementById(`b${this.currentQuestion}`).style.backgroundColor = '#ffffff'\n       document.getElementById(`b${this.currentQuestion}`).style.color = 'black'\n     } */\n\n    this.answerSubmittedObj = obj;\n  }\n\n  filledQuesColorClassLogic() {\n    const avail = this.answerSubmittedObj.find(e => e['id'] == this.TestQuiz[this.currentQuestion].qno);\n\n    if (avail && Object.values(avail).every(v => v)) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  submitExampleTest() {\n    var _a;\n\n    if (((_a = this.answerSubmittedObj) === null || _a === void 0 ? void 0 : _a.length) > 0 && Object.values(this.answerSubmittedObj).every(v => Object.values(v).every(val => val)) && this.answerSubmittedObj.length == this.TestQuiz.length) {\n      console.log(\"submitted!\");\n      this.answerSheet.push(...this.answerSubmittedObj);\n      this.currentQuestion = 0;\n      this.answerSubmittedObj = [];\n\n      if (this.uniqueRelation.length > 1) {\n        this.uniqueRelation.shift();\n        this.submissionPart = false;\n        this.TestQuiz = this.totalQuizQues.filter(obj => obj.relation == this.uniqueRelation[0]);\n      } else {\n        this.router.navigate(['base/test']);\n      }\n    } else {\n      alert(\"Please answer all questions\");\n    }\n  }\n\n  getTest1list() {\n    this.testService.getTest1Questionlist().subscribe(res => {\n      this.totalQuizQues = res;\n      let unique = [];\n      res.forEach(element => {\n        unique.push(element.relation);\n      });\n      this.uniqueRelation = [...new Set(unique)];\n      this.TestQuiz = res.filter(obj => obj.relation == this.uniqueRelation[0]);\n      this.currentQuestion = 0;\n\n      if (this.TestQuiz.length > 4) {\n        this.boxPaginationLogic();\n        console.log(this.incrementBoxes);\n      }\n    });\n  }\n\n  boxPaginationLogic() {\n    let boxAr = Array.from(Array(this.TestQuiz.length).keys());\n    this.indexAr = [...boxAr];\n    let incrementCopy;\n\n    if (this.incrementBoxes) {\n      incrementCopy = [...this.incrementBoxes];\n    }\n\n    console.log(\"incrementBoxValue at currentQuestion\", this.currentQuestion, \":\", incrementCopy);\n\n    if ((incrementCopy === null || incrementCopy === void 0 ? void 0 : incrementCopy[0]) == this.currentQuestion) {\n      console.log(\"clicked previous\", this.currentQuestion);\n      let startIndex = this.currentQuestion == 0 ? 0 : this.currentQuestion - 4;\n      this.incrementBoxes = this.indexAr.slice(this.currentQuestion - 4, this.currentQuestion);\n      console.log(\"incrementBoxValue at currentQuestion,firstlogic\", this.currentQuestion, \":\", this.incrementBoxes);\n    } else {\n      console.log(\"clicked next\", this.currentQuestion);\n      let endIndex = this.currentQuestion == boxAr.length ? boxAr.length : this.currentQuestion + 4;\n      this.incrementBoxes = this.indexAr.slice(this.currentQuestion, endIndex);\n      console.log(\"incrementBoxValue at currentQuestion,lastlogic\", this.currentQuestion, \":\", this.incrementBoxes);\n    }\n  }\n\n};\nTestScreenComponent = __decorate([Component({\n  selector: 'app-test-screen',\n  templateUrl: './test-screen.component.html',\n  styleUrls: ['./test-screen.component.scss']\n})], TestScreenComponent);\nexport { TestScreenComponent };","map":null,"metadata":{},"sourceType":"module"}