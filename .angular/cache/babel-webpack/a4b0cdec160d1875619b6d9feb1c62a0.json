{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n/** Error when invalid control is dirty, touched, or submitted. */\n\nexport class MyErrorStateMatcher {\n  isErrorState(control, form) {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n\n}\nlet SignupComponent = class SignupComponent {\n  constructor(bsModalService, commonService) {\n    this.bsModalService = bsModalService;\n    this.commonService = commonService;\n    this.registerForm = new FormGroup({\n      name: new FormControl(\"\", [Validators.required]),\n      email: new FormControl(\"\", [Validators.required, Validators.email]),\n      phone: new FormControl(\"\", [Validators.required, Validators.maxLength(10), Validators.minLength(10)]),\n      gender: new FormControl(\"\", [Validators.required]),\n      locality: new FormControl(\"\", [Validators.required]),\n      lastexam: new FormControl(\"\", [Validators.required]),\n      dob: new FormControl(\"\", [Validators.required]),\n      password: new FormControl(\"\", [Validators.required])\n    });\n    this.matcher = new MyErrorStateMatcher();\n  }\n\n  ngOnInit() {}\n\n  CancelModal() {\n    this.bsModalService.hide();\n  }\n\n  submitForm(form) {\n    const {\n      name,\n      email,\n      phone,\n      gender,\n      dob,\n      locality,\n      lastexam,\n      password\n    } = form;\n    let body = {\n      fullName: name,\n      email: email,\n      phone: phone,\n      gender: gender,\n      dob: dob,\n      locality: locality,\n      lastExam: lastexam,\n      password: password,\n      activateAccount: false,\n      test_1: {\n        completed: false\n      },\n      test_2: {\n        completed: false,\n        info: {\n          Intellectual: 0,\n          Sports: 0,\n          Artist: 0,\n          Social: 0,\n          Pragmatic: 0,\n          \"Persuader/Business\": 0,\n          Organiser: 0,\n          NA: 0\n        }\n      },\n      test_3: {\n        completed: false,\n        info: {\n          \"Visual Spatial\": 0,\n          Interpersonal: 0,\n          Intrapersonal: 0,\n          Linguistic: 0,\n          Logical: 0,\n          Naturalistic: 0,\n          \"Bodily Kinesthetic\": 0,\n          Musical: 0\n        }\n      },\n      test_4: {\n        completed: false\n      },\n      test_5: {\n        completed: false\n      },\n      test_6: {\n        completed: false\n      },\n      test_7: {\n        completed: false\n      },\n      test_8: {\n        completed: false\n      },\n      test_9: {\n        completed: false\n      }\n    };\n    /* Object.values(body).every((v) => Object.values(v).every((val) => val)) */\n\n    console.log(body);\n\n    if (name && email && phone && gender && dob && locality && lastexam && password) {\n      this.commonService.registerUser(body).subscribe(e => {\n        this.CancelModal();\n        this.commonService.snackBar(\"User registered successfully\", \"s\"), error => {\n          this.CancelModal();\n          this.commonService.snackBar(error.message, \"e\");\n        };\n      });\n    } else {\n      alert(\"Please fill all the details\");\n    }\n  }\n\n};\nSignupComponent = __decorate([Component({\n  selector: \"app-signup\",\n  templateUrl: \"./signup.component.html\",\n  styleUrls: [\"./signup.component.scss\"]\n})], SignupComponent);\nexport { SignupComponent };","map":null,"metadata":{},"sourceType":"module"}