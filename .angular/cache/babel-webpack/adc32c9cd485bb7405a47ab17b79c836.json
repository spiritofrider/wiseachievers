{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nlet TestScreenComponent = class TestScreenComponent {\n  constructor(testService, router, storageService, common, route) {\n    this.testService = testService;\n    this.router = router;\n    this.storageService = storageService;\n    this.common = common;\n    this.route = route;\n    this.submissionPart = true;\n    this.mainTestObject = [];\n    this.uniqueRelation = [];\n    this.answerSheet = [];\n    this.templateArray = ['3', '4', '5', '6']; //route param match for timer tests\n\n    this.relationForRedirection = ['3', '5', '6', '7', '8', '9'];\n    this.currentQuestion = 0;\n    this.decryptCookie = this.common.tokenDecryption(this.storageService.getCookie(\"token\"));\n  }\n\n  ngOnInit() {\n    this.common.tokenDecryption(this.storageService.getCookie(\"token\"))[\"isAdmin\"];\n    this.common.updatedTestStatus.subscribe(status => {\n      this.statusObject = status;\n\n      if (this.statusObject.length == 0) {\n        this.decryptCookie = this.common.tokenDecryption(this.storageService.getCookie(\"token\"));\n        this.testUserStatus(this.decryptCookie[\"_id\"]);\n      } else {\n        this.routeParam = this.route.snapshot.paramMap.get(\"type\");\n        this.getTest1list(`test${this.routeParam}`);\n      }\n    });\n  }\n\n  testUserStatus(userId) {\n    this.common.testUserStatus(userId).subscribe(e => {\n      this.statusObject = e;\n      this.routeParam = this.route.snapshot.paramMap.get(\"type\");\n      this.getTest1list(`test${this.routeParam}`);\n    }, error => {\n      this.common.snackBar(\"There is some issue in fetching the tests\", \"\");\n    });\n  }\n\n  traverseTest(testNo) {\n    this.currentQuestion = 0;\n    const test = testNo[0] == \"next\" ? (+testNo[1] + 1).toString() : (+testNo[1] - 1).toString();\n    this.TestQuiz = this.totalQuizQues.filter(obj => obj.relation == test);\n    testNo[0] == \"next\" ? this.uniqueRelation.shift() : this.uniqueRelation.unshift((+testNo[1] - 1).toString()); // need to check for prev\n\n    console.log(this.uniqueRelation);\n    this.relation = this.TestQuiz[0].relation;\n    this.submissionPart = false;\n  }\n\n  questionIncremented(qno) {\n    this.currentQuestion = qno;\n  }\n\n  finalObjReturned(obj) {\n    this.answerSubmittedObj = obj;\n    console.log(\"emit every obj\", obj);\n  }\n\n  submitExampleTest(test) {\n    var _a;\n\n    if (((_a = this.answerSubmittedObj) === null || _a === void 0 ? void 0 : _a.length) > 0 && Object.values(this.answerSubmittedObj).every(v => Object.values(v).every(val => val)) && this.answerSubmittedObj.length == this.TestQuiz.length) {\n      this.answerSheet.push(...this.answerSubmittedObj);\n      this.currentQuestion = 0;\n      this.answerSubmittedObj = [];\n      this.storeTest();\n\n      if (this.uniqueRelation.length > 1) {\n        this.uniqueRelation.shift();\n        this.submissionPart = false;\n        this.TestQuiz = this.totalQuizQues.filter(obj => obj.relation == this.uniqueRelation[0]);\n        this.relation = this.TestQuiz[0].relation;\n      }\n      /* else {\n      this.router.navigate([\"base/test\"]);\n      } */\n\n    } else {\n      alert(\"Please answer all questions\");\n    }\n  }\n\n  submitTimerBasedTest() {\n    var _a;\n\n    console.log(\"heree trouble\", this.answerSubmittedObj);\n\n    if (this.answerSubmittedObj) {\n      if (((_a = this.answerSubmittedObj) === null || _a === void 0 ? void 0 : _a.length) > 0) {\n        this.answerSheet.push(...this.answerSubmittedObj);\n        console.log(\"timerbase test\", this.answerSheet);\n        this.currentQuestion = 0;\n        this.answerSubmittedObj = [];\n        this.storeTest();\n      }\n    }\n  }\n\n  storeTest() {\n    const decryptCookie = this.common.tokenDecryption(this.storageService.getCookie(\"token\"));\n    let body = this.payloadForTest(decryptCookie);\n    this.testService.storeTestApi(body).subscribe(e => {\n      this.answerSheet = [];\n      console.log(e, \"score submitted\");\n\n      if (this.relationForRedirection.includes(this.relation)) {\n        this.router.navigate([\"base/test\"]);\n      }\n    }, error => {\n      this.common.snackBar(error.message, \"a\");\n      this.router.navigate([\"base/test\"]);\n    });\n  }\n\n  payloadForTest(cookieVal) {\n    const testkey = `test${this.relation}`;\n    return {\n      [testkey]: {\n        info: this.answerSheet\n      },\n      userId: cookieVal[\"_id\"],\n      testType: testkey\n    };\n  }\n\n  getTest1list(testNo) {\n    this.testService.getTest1Questionlist(testNo).subscribe(res => {\n      this.totalQuizQues = res;\n      const decryptCookie = this.common.tokenDecryption(this.storageService.getCookie(\"token\")); //start timer when quiz is loaded\n\n      console.log(\"cookie\", decryptCookie);\n\n      if (this.templateArray.includes(this.route.snapshot.paramMap.get(\"type\")) && !decryptCookie['isAdmin']) {\n        this.startTimer();\n      }\n\n      let unique = [];\n      res.forEach(element => {\n        unique.push(element.relation);\n      });\n      let uniqueList = [...new Set(unique)];\n      !decryptCookie[\"isAdmin\"] ? uniqueList.forEach(keys => {\n        var _a;\n\n        if (((_a = this.statusObject[`test_${keys}`]) === null || _a === void 0 ? void 0 : _a.completed) != true) {\n          this.uniqueRelation.push(keys);\n        }\n      }) : this.uniqueRelation = uniqueList;\n      this.firstRelation = this.uniqueRelation[0];\n      this.TestQuiz = res.filter(obj => obj.relation == this.uniqueRelation[0]);\n      this.relation = this.TestQuiz[0].relation;\n      this.currentQuestion = 0;\n    }, error => {\n      this.common.snackBar(error.message, \"a\");\n      this.router.navigate([\"base/test\"]);\n    });\n  }\n\n  TestName(key) {\n    const nameMapping = {\n      \"1\": \"Career Interest Profiler\",\n      \"2\": \"Personality Profiler\",\n      \"3\": \"Numerical Reasoning.\",\n      \"4\": \"English Aptitude.\",\n      \"5\": \"Mechanical Aptitude.\",\n      \"6\": \"Visual Spatial Test\"\n    };\n    return nameMapping[key];\n  }\n\n  RelationMapping(relation) {\n    let partName;\n\n    switch (relation) {\n      case \"1\":\n        partName = \": Part 1\";\n        break;\n\n      case \"2\":\n        partName = \": Part 2\";\n        break;\n\n      case \"3\":\n        partName = \": Part 3\";\n        break;\n\n      case \"4\":\n        partName = \": Part 1\";\n        break;\n\n      case \"5\":\n        partName = \": Part 2\";\n        break;\n\n      default:\n        \"\";\n    }\n\n    return partName;\n  }\n  /* Timer  */\n\n\n  startTimer() {\n    this.timeLeft = this.getTimerValue(this.route.snapshot.paramMap.get(\"type\"));\n    this.interval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        this.router.navigate([\"base/test\"]);\n        this.pauseTimer();\n        this.submitTimerBasedTest();\n      }\n    }, 1000);\n  }\n\n  pauseTimer() {\n    clearInterval(this.interval);\n  }\n\n  formatTime(s) {\n    return (s - (s %= 60)) / 60 + (9 < s ? ':' : ':0') + s;\n  }\n\n  getTimerValue(routeParam) {\n    const timerObject = {\n      \"3\": 25 * 60,\n      \"4\": 10 * 60,\n      \"5\": 20 * 60,\n      \"6\": 30 * 60\n    };\n    return timerObject[routeParam];\n  }\n\n};\nTestScreenComponent = __decorate([Component({\n  selector: \"app-test-screen\",\n  templateUrl: \"./test-screen.component.html\",\n  styleUrls: [\"./test-screen.component.scss\"]\n})], TestScreenComponent);\nexport { TestScreenComponent };","map":null,"metadata":{},"sourceType":"module"}