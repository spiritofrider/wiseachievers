{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../test.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/app/services/storage.service\";\nimport * as i4 from \"src/app/services/commonservice\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"../timer-based-test/timer-based-test.component\";\nimport * as i7 from \"../career-profiler/career-profiler.component\";\n\nfunction TestScreenComponent_div_3_h3_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h3\", 7);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Time Remaining \\u00A0 : \\u00A0\", ctx_r1.formatTime(ctx_r1.timeLeft), \"\");\n  }\n}\n\nfunction TestScreenComponent_div_3_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"timer-based-test\", 8);\n    i0.ɵɵlistener(\"questionIncrement\", function TestScreenComponent_div_3_div_4_Template_timer_based_test_questionIncrement_1_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext(2);\n      return ctx_r4.questionIncremented($event);\n    })(\"finalObj\", function TestScreenComponent_div_3_div_4_Template_timer_based_test_finalObj_1_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return ctx_r6.finalObjReturned($event);\n    })(\"submitExampleTestEmitter1\", function TestScreenComponent_div_3_div_4_Template_timer_based_test_submitExampleTestEmitter1_1_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return ctx_r7.submitTimerBasedTest($event);\n    })(\"traverseTestEmitter\", function TestScreenComponent_div_3_div_4_Template_timer_based_test_traverseTestEmitter_1_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return ctx_r8.traverseTest($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"TestQuiz\", ctx_r2.TestQuiz)(\"submissionPart\", ctx_r2.submissionPart)(\"TestType\", ctx_r2.relation)(\"firstRelation\", ctx_r2.firstRelation);\n  }\n}\n\nfunction TestScreenComponent_div_3_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"app-career-profiler\", 9);\n    i0.ɵɵlistener(\"questionIncrement\", function TestScreenComponent_div_3_div_5_Template_app_career_profiler_questionIncrement_1_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return ctx_r9.questionIncremented($event);\n    })(\"finalObj\", function TestScreenComponent_div_3_div_5_Template_app_career_profiler_finalObj_1_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return ctx_r11.finalObjReturned($event);\n    })(\"submitExampleTestEmitter\", function TestScreenComponent_div_3_div_5_Template_app_career_profiler_submitExampleTestEmitter_1_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return ctx_r12.submitExampleTest($event);\n    })(\"traverseTestEmitter\", function TestScreenComponent_div_3_div_5_Template_app_career_profiler_traverseTestEmitter_1_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return ctx_r13.traverseTest($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"TestQuiz\", ctx_r3.TestQuiz)(\"submissionPart\", ctx_r3.submissionPart)(\"TestType\", ctx_r3.relation)(\"firstRelation\", ctx_r3.firstRelation);\n  }\n}\n\nfunction TestScreenComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵelementStart(1, \"h5\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, TestScreenComponent_div_3_h3_3_Template, 2, 1, \"h3\", 5);\n    i0.ɵɵtemplate(4, TestScreenComponent_div_3_div_4_Template, 2, 4, \"div\", 6);\n    i0.ɵɵtemplate(5, TestScreenComponent_div_3_div_5_Template, 2, 4, \"div\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\" \", ctx_r0.TestName(ctx_r0.routeParam), \"\", ctx_r0.RelationMapping(ctx_r0.relation), \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.templateArray.includes(ctx_r0.routeParam) && !ctx_r0.isAdmin);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.templateArray.includes(ctx_r0.routeParam));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.templateArray.includes(ctx_r0.routeParam));\n  }\n}\n\nexport let TestScreenComponent = /*#__PURE__*/(() => {\n  class TestScreenComponent {\n    constructor(testService, router, storageService, common, route) {\n      this.testService = testService;\n      this.router = router;\n      this.storageService = storageService;\n      this.common = common;\n      this.route = route;\n      this.submissionPart = true;\n      this.mainTestObject = [];\n      this.uniqueRelation = [];\n      this.answerSheet = [];\n      this.templateArray = ['3', '4', '5', '6']; //route param match for timer tests\n\n      this.relationForRedirection = ['3', '5', '6', '7', '8', '9'];\n      this.currentQuestion = 0;\n      this.isAdmin = this.common.tokenDecryption(this.storageService.getCookie(\"token\"))[\"isAdmin\"] || false;\n    }\n\n    ngOnInit() {\n      this.common.tokenDecryption(this.storageService.getCookie(\"token\"))[\"isAdmin\"];\n      this.common.updatedTestStatus.subscribe(status => {\n        this.statusObject = status;\n\n        if (this.statusObject.length == 0) {\n          this.decryptCookie = this.common.tokenDecryption(this.storageService.getCookie(\"token\"));\n          this.testUserStatus(this.decryptCookie[\"_id\"]);\n        } else {\n          this.routeParam = this.route.snapshot.paramMap.get(\"type\");\n          this.getTest1list(`test${this.routeParam}`);\n        }\n      });\n    }\n\n    ngOnChanges() {\n      this.isAdmin = this.common.tokenDecryption(this.storageService.getCookie(\"token\"))[\"isAdmin\"] || false;\n    }\n\n    testUserStatus(userId) {\n      this.common.testUserStatus(userId).subscribe(e => {\n        this.statusObject = e;\n        this.routeParam = this.route.snapshot.paramMap.get(\"type\");\n        this.getTest1list(`test${this.routeParam}`);\n      }, error => {\n        this.common.snackBar(\"There is some issue in fetching the tests\", \"\");\n      });\n    }\n\n    traverseTest(testNo) {\n      this.currentQuestion = 0;\n      const test = testNo[0] == \"next\" ? (+testNo[1] + 1).toString() : (+testNo[1] - 1).toString();\n      this.TestQuiz = this.totalQuizQues.filter(obj => obj.relation == test);\n      testNo[0] == \"next\" ? this.uniqueRelation.shift() : this.uniqueRelation.unshift((+testNo[1] - 1).toString()); // need to check for prev\n\n      this.relation = this.TestQuiz[0].relation;\n      this.submissionPart = false;\n    }\n\n    questionIncremented(qno) {\n      this.currentQuestion = qno;\n    }\n\n    finalObjReturned(obj) {\n      this.answerSubmittedObj = obj;\n      console.log(\"emit every obj\", obj);\n    }\n\n    submitExampleTest(test) {\n      var _a;\n\n      if (((_a = this.answerSubmittedObj) === null || _a === void 0 ? void 0 : _a.length) > 0 && Object.values(this.answerSubmittedObj).every(v => Object.values(v).every(val => val)) && this.answerSubmittedObj.length == this.TestQuiz.length) {\n        this.answerSheet.push(...this.answerSubmittedObj);\n        this.currentQuestion = 0;\n        this.answerSubmittedObj = [];\n        this.storeTest();\n        /* else {\n             this.router.navigate([\"base/test\"]);\n           } */\n      } else {\n        alert(\"Please answer all questions\");\n      }\n    }\n\n    submitTimerBasedTest() {\n      var _a;\n\n      console.log(\"heree trouble\", this.answerSubmittedObj);\n\n      if (this.answerSubmittedObj) {\n        if (((_a = this.answerSubmittedObj) === null || _a === void 0 ? void 0 : _a.length) > 0) {\n          this.answerSheet.push(...this.answerSubmittedObj);\n          console.log(\"timerbase test\", this.answerSheet);\n          this.currentQuestion = 0;\n          this.answerSubmittedObj = [];\n          this.storeTest();\n        }\n      }\n    }\n\n    storeTest() {\n      const decryptCookie = this.common.tokenDecryption(this.storageService.getCookie(\"token\"));\n      let body = this.payloadForTest(decryptCookie);\n      this.testService.storeTestApi(body).subscribe(e => {\n        this.answerSheet = [];\n        console.log(e, \"score submitted\");\n        console.log(this.relation, \"here\");\n\n        if (this.uniqueRelation.length > 1) {\n          this.uniqueRelation.shift();\n          this.submissionPart = false;\n          this.TestQuiz = this.totalQuizQues.filter(obj => obj.relation == this.uniqueRelation[0]);\n          this.relation = this.TestQuiz[0].relation;\n        }\n\n        if (this.relationForRedirection.includes(this.relation)) {\n          console.log(\"why \", this.relationForRedirection.includes(this.relation));\n          this.router.navigate([\"base/test\"]);\n        }\n      }, error => {\n        this.common.snackBar(error.message, \"a\");\n        this.router.navigate([\"base/test\"]);\n      });\n    }\n\n    payloadForTest(cookieVal) {\n      const testkey = `test${this.relation}`;\n      return {\n        [testkey]: {\n          info: this.answerSheet\n        },\n        userId: cookieVal[\"_id\"],\n        testType: testkey\n      };\n    }\n\n    getTest1list(testNo) {\n      this.testService.getTest1Questionlist(testNo).subscribe(res => {\n        this.totalQuizQues = res;\n        const decryptCookie = this.common.tokenDecryption(this.storageService.getCookie(\"token\")); //start timer when quiz is loaded\n\n        console.log(\"cookie\", decryptCookie);\n\n        if (this.templateArray.includes(this.route.snapshot.paramMap.get(\"type\")) && !decryptCookie['isAdmin']) {\n          this.startTimer();\n        }\n\n        let unique = [];\n        res.forEach(element => {\n          unique.push(element.relation);\n        });\n        let uniqueList = [...new Set(unique)];\n        !decryptCookie[\"isAdmin\"] ? uniqueList.forEach(keys => {\n          var _a;\n\n          if (((_a = this.statusObject[`test_${keys}`]) === null || _a === void 0 ? void 0 : _a.completed) != true) {\n            this.uniqueRelation.push(keys);\n          }\n        }) : this.uniqueRelation = uniqueList;\n        this.firstRelation = this.uniqueRelation[0];\n        this.TestQuiz = res.filter(obj => obj.relation == this.uniqueRelation[0]);\n        this.relation = this.TestQuiz[0].relation;\n        this.currentQuestion = 0;\n      }, error => {\n        this.common.snackBar(error.message, \"a\");\n        this.router.navigate([\"base/test\"]);\n      });\n    }\n\n    TestName(key) {\n      const nameMapping = {\n        \"1\": \"Career Interest Profiler\",\n        \"2\": \"Personality Profiler\",\n        \"3\": \"Numerical Reasoning.\",\n        \"4\": \"English Aptitude.\",\n        \"5\": \"Mechanical Aptitude.\",\n        \"6\": \"Visual Spatial Test\"\n      };\n      return nameMapping[key];\n    }\n\n    RelationMapping(relation) {\n      let partName;\n\n      switch (relation) {\n        case \"1\":\n          partName = \": Part 1\";\n          break;\n\n        case \"2\":\n          partName = \": Part 2\";\n          break;\n\n        case \"3\":\n          partName = \": Part 3\";\n          break;\n\n        case \"4\":\n          partName = \": Part 1\";\n          break;\n\n        case \"5\":\n          partName = \": Part 2\";\n          break;\n\n        default:\n          \"\";\n      }\n\n      return partName;\n    }\n    /* Timer  */\n\n\n    startTimer() {\n      this.timeLeft = this.getTimerValue(this.route.snapshot.paramMap.get(\"type\"));\n      this.interval = setInterval(() => {\n        if (this.timeLeft > 0) {\n          this.timeLeft--;\n        } else {\n          this.router.navigate([\"base/test\"]);\n          this.pauseTimer();\n          this.submitTimerBasedTest();\n        }\n      }, 1000);\n    }\n\n    pauseTimer() {\n      clearInterval(this.interval);\n    }\n\n    formatTime(s) {\n      return (s - (s %= 60)) / 60 + (9 < s ? ':' : ':0') + s;\n    }\n\n    getTimerValue(routeParam) {\n      const timerObject = {\n        \"3\": 25 * 60,\n        \"4\": 10 * 60,\n        \"5\": 20 * 60,\n        \"6\": 30 * 60\n      };\n      return timerObject[routeParam];\n    }\n\n  }\n\n  TestScreenComponent.ɵfac = function TestScreenComponent_Factory(t) {\n    return new (t || TestScreenComponent)(i0.ɵɵdirectiveInject(i1.TestService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.StorageService), i0.ɵɵdirectiveInject(i4.CommonService), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n  };\n\n  TestScreenComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TestScreenComponent,\n    selectors: [[\"app-test-screen\"]],\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 4,\n    vars: 1,\n    consts: [[1, \"container1\"], [1, \"row\"], [1, \"col-md-12\"], [\"class\", \"data-card\", 4, \"ngIf\"], [1, \"data-card\"], [\"id\", \"timer\", \"class\", \"ml-auto pr-4\", 4, \"ngIf\"], [4, \"ngIf\"], [\"id\", \"timer\", 1, \"ml-auto\", \"pr-4\"], [3, \"TestQuiz\", \"submissionPart\", \"TestType\", \"firstRelation\", \"questionIncrement\", \"finalObj\", \"submitExampleTestEmitter1\", \"traverseTestEmitter\"], [3, \"TestQuiz\", \"submissionPart\", \"TestType\", \"firstRelation\", \"questionIncrement\", \"finalObj\", \"submitExampleTestEmitter\", \"traverseTestEmitter\"]],\n    template: function TestScreenComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵtemplate(3, TestScreenComponent_div_3_Template, 6, 5, \"div\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.TestQuiz);\n      }\n    },\n    directives: [i5.NgIf, i6.TimerBasedTestComponent, i7.CareerProfilerComponent],\n    styles: [\".data-card[_ngcontent-%COMP%]{display:flex;flex-direction:column;min-height:20px;border-radius:.5em;text-decoration:none;margin:1em;box-shadow:1em 1em 1.5em -.5em #0000001a;transition:transform .45s ease,background .45s ease;background-color:#ecf3f4;justify-content:center}h5[_ngcontent-%COMP%]{padding:20px;background-color:#fff;font-size:15px}.inner-data-card[_ngcontent-%COMP%]{padding:2.5em;background-color:#fff;font-size:15px}.inner-data-card[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{margin-right:10px;font-size:18px;color:#d3d3d3}.inner-data-card[_ngcontent-%COMP%]   .choiceContainer[_ngcontent-%COMP%]{padding:1em}.inner-data-card[_ngcontent-%COMP%]   .question[_ngcontent-%COMP%]{font-weight:600}.stepBtn[_ngcontent-%COMP%]{border-radius:5px;padding:4px 10px;background-color:#ecf3f4}.stepBtn[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{color:#000;margin:3px}.btn-primary.disabled[_ngcontent-%COMP%], .btn-primary[_ngcontent-%COMP%]:disabled{background-color:#d3d3d3!important}.questionNumberContainer[_ngcontent-%COMP%]{display:flex;flex-direction:row;margin:20px 1em 0}.questionNumberContainer[_ngcontent-%COMP%]   .questionNumberBox[_ngcontent-%COMP%]{min-width:25px;max-height:25px;margin-right:10px;background-color:#fff;border-radius:3px}.questionNumberContainer[_ngcontent-%COMP%]   .questionNumberBox[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-size:14px;text-align:center}.activeClass[_ngcontent-%COMP%]{transform:scale(1.5)}sub[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{padding:12px 3px 8px;font-size:6px}.filledQuesClass[_ngcontent-%COMP%]{background-color:#0081d6!important;color:#fff}\"]\n  });\n  return TestScreenComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}