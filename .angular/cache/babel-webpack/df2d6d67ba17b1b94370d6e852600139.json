{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-bootstrap/modal\";\nimport * as i2 from \"src/app/services/commonservice\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@angular/material/select\";\nimport * as i8 from \"@angular/material/core\";\n\nfunction SignupComponent_mat_error_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Please enter a valid email address \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction SignupComponent_mat_error_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Email is \");\n    i0.ɵɵelementStart(2, \"strong\");\n    i0.ɵɵtext(3, \"required\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n/** Error when invalid control is dirty, touched, or submitted. */\n\n\nexport class MyErrorStateMatcher {\n  isErrorState(control, form) {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n\n}\nexport let SignupComponent = /*#__PURE__*/(() => {\n  class SignupComponent {\n    constructor(bsModalService, commonService) {\n      this.bsModalService = bsModalService;\n      this.commonService = commonService;\n      this.registerForm = new FormGroup({\n        name: new FormControl(\"\", [Validators.required]),\n        email: new FormControl(\"\", [Validators.required, Validators.email]),\n        phone: new FormControl(\"\", [Validators.required, Validators.maxLength(10), Validators.minLength(10)]),\n        gender: new FormControl(\"\", [Validators.required]),\n        locality: new FormControl(\"\", [Validators.required]),\n        lastexam: new FormControl(\"\", [Validators.required]),\n        dob: new FormControl(\"\", [Validators.required]),\n        password: new FormControl(\"\", [Validators.required])\n      });\n      this.matcher = new MyErrorStateMatcher();\n    }\n\n    ngOnInit() {}\n\n    CancelModal() {\n      this.bsModalService.hide();\n    }\n\n    submitForm(form) {\n      const {\n        name,\n        email,\n        phone,\n        gender,\n        dob,\n        locality,\n        lastexam,\n        password\n      } = form;\n      let body = {\n        fullName: name,\n        email: email,\n        phone: phone,\n        gender: gender,\n        dob: dob,\n        locality: locality,\n        lastExam: lastexam,\n        password: password,\n        activateAccount: false,\n        test_1: {\n          completed: false\n        },\n        test_2: {\n          completed: false,\n          info: {\n            Intellectual: 0,\n            Sports: 0,\n            Artist: 0,\n            Social: 0,\n            Pragmatic: 0,\n            \"Persuader/Business\": 0,\n            Organiser: 0,\n            NA: 0\n          }\n        },\n        test_3: {\n          completed: false,\n          info: {\n            \"Visual Spatial\": 0,\n            Interpersonal: 0,\n            Intrapersonal: 0,\n            Linguistic: 0,\n            Logical: 0,\n            Naturalistic: 0,\n            \"Bodily Kinesthetic\": 0,\n            Musical: 0\n          }\n        },\n        test_4: {\n          completed: false\n        },\n        test_5: {\n          completed: false\n        },\n        test_6: {\n          completed: false\n        },\n        test_7: {\n          completed: false\n        },\n        test_8: {\n          completed: false\n        },\n        test_9: {\n          completed: false\n        }\n      };\n      /* Object.values(body).every((v) => Object.values(v).every((val) => val)) */\n\n      console.log(body);\n\n      if (name && email && phone && gender && dob && locality && lastexam && password) {\n        this.commonService.registerUser(body).subscribe(e => {\n          this.CancelModal();\n          this.commonService.snackBar(\"User registered successfully\", \"s\"), error => {\n            this.CancelModal();\n            this.commonService.snackBar(error.message, \"e\");\n          };\n        });\n      } else {\n        alert(\"Please fill all the details\");\n      }\n    }\n\n  }\n\n  SignupComponent.ɵfac = function SignupComponent_Factory(t) {\n    return new (t || SignupComponent)(i0.ɵɵdirectiveInject(i1.BsModalService), i0.ɵɵdirectiveInject(i2.CommonService));\n  };\n\n  SignupComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SignupComponent,\n    selectors: [[\"app-signup\"]],\n    decls: 40,\n    vars: 4,\n    consts: [[1, \"modal-conent\"], [1, \"modal-body\"], [1, \"row\"], [1, \"col-md-12\"], [\"href\", \"javascript:;\", 1, \"float-right\", 2, \"margin-left\", \"auto\", 3, \"click\"], [\"aria-hidden\", \"true\", 1, \"fa\", \"fa-times\"], [1, \"login-form-1\"], [3, \"formGroup\"], [1, \"col-md-6\", \"form-group\"], [\"type\", \"text\", \"placeholder\", \"Name *\", \"formControlName\", \"name\", \"value\", \"\", 1, \"form-control\"], [\"appearance\", \"outline\", 1, \"example-full-width\"], [\"type\", \"email\", \"matInput\", \"\", \"formControlName\", \"email\", \"placeholder\", \"Ex. pat@example.com\", 3, \"errorStateMatcher\"], [4, \"ngIf\"], [\"appearance\", \"outline\"], [\"formControlName\", \"gender\", \"required\", \"\"], [\"value\", \"M\"], [\"type\", \"text\", \"placeholder\", \"DOB(DD/MM/YYYY) * \", \"formControlName\", \"dob\", \"value\", \"\", 1, \"form-control\"], [\"type\", \"text\", \"placeholder\", \"locality *\", \"formControlName\", \"locality\", \"value\", \"\", 1, \"form-control\"], [\"type\", \"text\", \"placeholder\", \"last Exam *\", \"formControlName\", \"lastexam\", \"value\", \"\", 1, \"form-control\"], [\"type\", \"password\", \"placeholder\", \"Password *\", \"formControlName\", \"password\", \"value\", \"\", 1, \"form-control\"], [1, \"form-group\"], [\"type\", \"submit\", \"value\", \"Login\", 1, \"btnSubmit\", 3, \"click\"]],\n    template: function SignupComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"a\", 4);\n        i0.ɵɵlistener(\"click\", function SignupComponent_Template_a_click_4_listener() {\n          return ctx.CancelModal();\n        });\n        i0.ɵɵelement(5, \"i\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 6);\n        i0.ɵɵelementStart(7, \"form\", 7);\n        i0.ɵɵelementStart(8, \"div\", 2);\n        i0.ɵɵelementStart(9, \"div\", 8);\n        i0.ɵɵelement(10, \"input\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 8);\n        i0.ɵɵelementStart(12, \"mat-form-field\", 10);\n        i0.ɵɵelementStart(13, \"mat-label\");\n        i0.ɵɵtext(14, \"Email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(15, \"input\", 11);\n        i0.ɵɵtemplate(16, SignupComponent_mat_error_16_Template, 2, 0, \"mat-error\", 12);\n        i0.ɵɵtemplate(17, SignupComponent_mat_error_17_Template, 4, 0, \"mat-error\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"div\", 2);\n        i0.ɵɵelement(19, \"div\", 8);\n        i0.ɵɵelementStart(20, \"div\", 8);\n        i0.ɵɵelementStart(21, \"mat-form-field\", 13);\n        i0.ɵɵelementStart(22, \"mat-label\");\n        i0.ɵɵtext(23, \"Gender(M/F/O) *\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"mat-select\", 14);\n        i0.ɵɵelementStart(25, \"mat-option\", 15);\n        i0.ɵɵtext(26, \"M\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"div\", 2);\n        i0.ɵɵelementStart(28, \"div\", 8);\n        i0.ɵɵelement(29, \"input\", 16);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(30, \"div\", 8);\n        i0.ɵɵelement(31, \"input\", 17);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(32, \"div\", 2);\n        i0.ɵɵelementStart(33, \"div\", 8);\n        i0.ɵɵelement(34, \"input\", 18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(35, \"div\", 8);\n        i0.ɵɵelement(36, \"input\", 19);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(37, \"div\", 20);\n        i0.ɵɵelementStart(38, \"button\", 21);\n        i0.ɵɵlistener(\"click\", function SignupComponent_Template_button_click_38_listener() {\n          return ctx.submitForm(ctx.registerForm.value);\n        });\n        i0.ɵɵtext(39, \" Register \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"errorStateMatcher\", ctx.matcher);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.registerForm.get(\"email\").hasError(\"email\") && !ctx.registerForm.hasError(\"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.registerForm.get(\"email\").hasError(\"required\"));\n      }\n    },\n    directives: [i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.DefaultValueAccessor, i3.NgControlStatus, i3.FormControlName, i4.MatFormField, i4.MatLabel, i5.MatInput, i6.NgIf, i7.MatSelect, i3.RequiredValidator, i8.MatOption, i4.MatError],\n    styles: [\".mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-infix[_ngcontent-%COMP%]{padding:.8em 0!important}.mat-form-field-infix[_ngcontent-%COMP%]{border-top:none!important}\"]\n  });\n  return SignupComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}